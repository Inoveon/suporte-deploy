# üîß API Production Dockerfile - Suporte Chamados
# Multi-stage build optimized for production

# Build stage
FROM python:3.11-slim as builder

# Set build environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.11-slim

# Set production environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/app" \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    ENVIRONMENT=production

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN useradd --create-home --shell /bin/bash --uid 1000 app

# Set work directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /root/.local /home/app/.local

# Copy project files
COPY --chown=app:app app/ ./app/
COPY --chown=app:app scripts/ ./scripts/
COPY --chown=app:app migrations/ ./migrations/
COPY --chown=app:app alembic.ini .

# Create necessary directories with correct permissions
RUN mkdir -p logs uploads temp backup \
    && chown -R app:app logs uploads temp backup

# Set PATH to include user packages
ENV PATH=/home/app/.local/bin:$PATH

# Switch to non-root user
USER app

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Expose port
EXPOSE 8002

# Create startup script
COPY --chown=app:app <<'EOF' /app/entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ Iniciando API Suporte..."

# Wait for database usando DATABASE_URL do ambiente
echo "‚è≥ Aguardando banco de dados..."
# Extrai componentes da DATABASE_URL para testar conex√£o
DB_USER=$(echo "$DATABASE_URL" | sed -n 's/.*:\/\/\([^:]*\):.*/\1/p')
DB_PASS=$(echo "$DATABASE_URL" | sed -n 's/.*:\/\/[^:]*:\([^@]*\)@.*/\1/p')
DB_HOST=$(echo "$DATABASE_URL" | sed -n 's/.*@\([^:]*\):.*/\1/p')
DB_PORT=$(echo "$DATABASE_URL" | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
DB_NAME=$(echo "$DATABASE_URL" | sed -n 's/.*\/\(.*\)/\1/p')

echo "  ‚Üí Database: $DB_NAME @ $DB_HOST:$DB_PORT (user: $DB_USER)"

until python -c "import psycopg2; psycopg2.connect('$DATABASE_URL')" 2>/dev/null; do
    echo "Banco n√£o dispon√≠vel, aguardando..."
    sleep 2
done
echo "‚úÖ Banco de dados pronto!"

# Run migrations
echo "üîÑ Aplicando migrations..."
alembic upgrade head || echo "‚ö†Ô∏è Falha nas migrations (pode ser normal se j√° aplicadas)"

# Start application
echo "‚úÖ Iniciando aplica√ß√£o..."
exec uvicorn app.main:app \
    --host 0.0.0.0 \
    --port 8002 \
    --workers 1 \
    --access-log \
    --log-level info
EOF

RUN chmod +x /app/entrypoint.sh

# Run the application
CMD ["/app/entrypoint.sh"]