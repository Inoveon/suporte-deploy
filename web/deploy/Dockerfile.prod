# 🌐 Web Production Dockerfile - Suporte Portal
# Multi-stage build optimized for production

# Build stage
FROM node:20-alpine AS build

# Set build environment
ENV NODE_ENV=production \
    NPM_CONFIG_CACHE=/tmp/.npm \
    NEXT_TELEMETRY_DISABLED=1

# Install build tools
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && ln -sf python3 /usr/bin/python

# Set work directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm install --no-audit --no-fund \
    && npm cache clean --force

# Copy source code
COPY . .

# Set build environment variables
ENV VITE_BASE_PATH=/portal/suporte/ \
    VITE_API_URL=https://office.inoveon.com.br/api/suporte \
    VITE_ENVIRONMENT=production \
    GENERATE_SOURCEMAP=false

# Build application (use local vite installation)
RUN NODE_ENV=production npx vite build --mode production

# Production stage
FROM nginx:1.27-alpine

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=America/Sao_Paulo
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create nginx user if not exists
RUN addgroup -g 1000 -S nginx || true \
    && adduser -u 1000 -D -S -G nginx nginx || true

# Copy built application to correct path
COPY --from=build /app/dist /usr/share/nginx/html/portal/suporte

# Create custom nginx configuration
COPY <<'EOF' /etc/nginx/conf.d/default.conf
# 🌐 Nginx Configuration - Suporte Portal (Hybrid Deploy)
# Suporta acesso via raiz (dev) e /portal/suporte (prod)
server {
    listen 3002;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' http://10.0.20.11:8002 https://office.inoveon.com.br;" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # 🌐 HYBRID DEPLOY: Produção - Acesso via /portal/suporte (Traefik)
    location /portal/suporte {
        try_files $uri $uri/ /portal/suporte/index.html;

        # No cache for HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }
    }

    # 🌐 HYBRID DEPLOY: Desenvolvimento - Acesso direto via raiz (IP:3002)
    location / {
        try_files $uri $uri/ /portal/suporte/index.html;

        # No cache for HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Block hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block common attack patterns
    location ~* \.(php|asp|aspx|jsp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /portal/suporte/index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

# Create nginx.conf with optimized settings
COPY <<'EOF' /etc/nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Security
    server_tokens off;
    
    include /etc/nginx/conf.d/*.conf;
}
EOF

# Set correct permissions
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /etc/nginx/conf.d \
    && touch /var/run/nginx.pid \
    && chown nginx:nginx /var/run/nginx.pid

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3002/health || exit 1

# Expose port
EXPOSE 3002

# Start nginx
CMD ["nginx", "-g", "daemon off;"]